@model Model.Chat.ChatViewModel

@{
    ViewData["Title"] = "Index";
}

<div class="container">
    <h1>Chat Room</h1>
    <div class="row">
        <div class="col-md-8">
            <div id="chat-container" style="height: 500px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; margin-bottom: 20px;">
                @foreach (var message in Model.Messages)
                {
                    <div class="message @(message.Sender == Model.CurrentUser ? "text-end" : "text-start")">
                        <strong>@message.Sender</strong> (@message.Timestamp.ToLocalTime().ToString("g"))<br />
                        @message.Message
                        <hr />
                    </div>
                }
            </div>

            <div class="input-group">
                <input type="text" id="messageInput" class="form-control" placeholder="Type your message here..." />
                <button id="sendButton" class="btn btn-primary">Send</button>
            </div>
        </div>
        <div class="col-md-4">
            <h3>Online Users</h3>
            <ul id="usersList" class="list-group">
                <!-- Users will be added dynamically -->
            </ul>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const currentUser = "@Model.CurrentUser";
        const webApiUrl = "https://localhost:7193";

        // WebSocket connection
        const socket = new WebSocket(`wss://localhost:7193/ws/chat`);

        socket.onopen = function(e) {
            console.log("WebSocket connection established");
        };

        socket.onmessage = function(event) {
            const message = JSON.parse(event.data);
            addMessageToChat(message);

            // Auto-scroll to bottom
            const chatContainer = document.getElementById("chat-container");
            chatContainer.scrollTop = chatContainer.scrollHeight;
        };

        socket.onclose = function(event) {
            if (event.wasClean) {
                console.log(`Connection closed cleanly, code=${event.code}, reason=${event.reason}`);
            } else {
                console.log('Connection died');
                // Try to reconnect after 5 seconds
                setTimeout(() => {
                    window.location.reload();
                }, 5000);
            }
        };

        socket.onerror = function(error) {
            console.log(`WebSocket error: ${error.message}`);
        };

        // Send message when button is clicked
        document.getElementById("sendButton").addEventListener("click", sendMessage);

        // Also send when Enter key is pressed
        document.getElementById("messageInput").addEventListener("keypress", function(e) {
            if (e.key === "Enter") {
                sendMessage();
            }
        });

        function sendMessage() {
            const messageInput = document.getElementById("messageInput");
            const messageText = messageInput.value.trim();

            if (messageText) {
                const message = {
                    Sender: currentUser,
                    Message: messageText
                };

                socket.send(JSON.stringify(message));
                messageInput.value = "";
            }
        }

        function addMessageToChat(message) {
            const chatContainer = document.getElementById("chat-container");

            const messageDiv = document.createElement("div");
            messageDiv.className = `message ${message.Sender === currentUser ? "text-end" : "text-start"}`;

            messageDiv.innerHTML = `
                <strong>${message.Sender}</strong> (${new Date(message.Timestamp).toLocaleString()})<br />
                ${message.Message}
                <hr />
            `;

            chatContainer.appendChild(messageDiv);
        }

        // Load chat history from API
        async function loadChatHistory() {
            try {
                const response = await fetch(`${webApiUrl}/api/chat/history`);
                if (response.ok) {
                    const messages = await response.json();
                    messages.forEach(addMessageToChat);

                    // Auto-scroll to bottom
                    const chatContainer = document.getElementById("chat-container");
                    chatContainer.scrollTop = chatContainer.scrollHeight;
                }
            } catch (error) {
                console.error("Error loading chat history:", error);
            }
        }

        // Initial load
        loadChatHistory();
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
